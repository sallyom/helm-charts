{{- if .Values.createsecret.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ tpl (include "tsa.createsecret.fullname" $) $ }}
{{ tpl (include "common.names.namespace" $) $ | indent 2 }}
  labels:
    app.kubernetes.io/component: {{ tpl (include "tsa.createsecret.name" $) $ }}
    {{- tpl (include "common.labels.labels" $) $ | nindent 4 }}
{{- if .Values.createsecret.annotations }}
  annotations:
{{ tpl (toYaml .Values.createsecret.annotations) $ | indent 4 }}
{{- end }}
spec:
{{- if .Values.createsecret.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ (tpl (.Values.createsecret.ttlSecondsAfterFinished | toString) $) | int64 }}
{{- end }}
  template:
    spec:
      serviceAccountName: {{ tpl (include "tsa.serviceAccountName.createsecret" $) $ }}
      restartPolicy: Never
      automountServiceAccountToken: {{ tpl (.Values.createsecret.serviceAccount.mountToken | toString) $ }}
      containers:
        - name: {{ tpl (include "tsa.createsecret.fullname" $) $ }}
          image: "{{ tpl (include "common.images.image" .Values.createsecret.image) $ }}"
          imagePullPolicy: "{{ tpl (.Values.createsecret.image.imagePullPolicy) $ }}"
          {{- tpl (include "common.images.imagePullSecrets" (dict "pullSecrets" (list .Values.createsecret.image.imagePullSecrets) "context" $)) $ | indent 10 }}
          env:
          - name: NAMESPACE
            valueFrom:  
              fieldRef:
                fieldPath: metadata.namespace
          {{- if .Values.createsecret.extraEnvVars }}
{{ tpl (toYaml .Values.createsecret.extraEnvVars) . | indent 12 }}
          {{- end }}
          {{- if or .Values.createsecret.extraEnvVarsCM .Values.createsecret.extraEnvVarsSecret }}
          envFrom:
          {{- if .Values.createsecret.extraEnvVarsCM }}
            - configMapRef:
               name: {{ tpl (.Values.createsecret.extraEnvVarsCM) $ }}
          {{- end }}
          {{- if .Values.createsecret.extraEnvVarsSecret }}
            - secretRef:
               name: {{ tpl (.Values.createsecret.extraEnvVarsSecret) $ }}
          {{- end }}
          {{- end }}
          args: [
            "--secret={{ tpl (include "tsa.secret.name" $) $ }}"
          ]
    {{- if .Values.createsecret.resources }}
          resources:
{{ tpl (toYaml .Values.createsecret.resources) . | indent 12 }}
    {{- end }}
    {{- if .Values.createsecret.containerSecurityContext.enabled }}
          securityContext:
{{ tpl (omit .Values.createsecret.containerSecurityContext "enabled" | toYaml) . | indent 12 }}
    {{- end }}
          {{- if .Values.createsecret.extraVolumeMounts }}
{{ tpl (toYaml .Values.createsecret.extraVolumeMounts) . | indent 12 }}
          {{- end }}
    {{- if .Values.createsecret.podSecurityContext.enabled }}
      securityContext:
{{ tpl (omit .Values.createsecret.podSecurityContext "enabled" | toYaml) . | indent 8 }}
    {{- end }}
    {{- if .Values.createsecret.tolerations }}
      tolerations:
{{ tpl (toYaml .Values.createsecret.tolerations) . | indent 8 }}
    {{- end }}
    {{- if .Values.createsecret.nodeSelector }}
      tolerations:
{{ tpl (toYaml .Values.createsecret.nodeSelector) . | indent 8 }}
    {{- end }}
    {{- if .Values.createsecret.extraVolumes }}
{{ tpl (toYaml .Values.createsecret.extraVolumes) . | indent 8 }}
    {{- end }}
{{- end }}
